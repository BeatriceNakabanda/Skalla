{"remainingRequest":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/src/views/Tables/ListOfEstimatesTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/src/views/Tables/ListOfEstimatesTable.vue","mtime":1580895677150},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CreateEstimateForm from \"../Forms/CreateEstimateForm\";\nimport EditEstimateForm from \"../Forms/EditEstimateForm\";\nimport flatPicker from \"vue-flatpickr-component\";\nimport \"flatpickr/dist/flatpickr.css\";\nimport axios from \"axios\";\n// import store from \"../../store\"\nimport { format } from 'date-fns' \nimport AuthService from '../../services/AuthService';\nexport default {\n  name: \"estimates-table\",\n  components: {\n    CreateEstimateForm,\n    EditEstimateForm,\n    flatPicker\n  },\n  props: {\n    estimates: Array,\n    type: {\n      type: String\n    },\n    title: String\n  },\n  data() {\n    return {\n      requestEstimateModal: false,\n      estimateModal: false,\n      format,\n\n      selectedProject: '',\n      selectedDeveloper: '',\n      error: false,\n      submitting: false,\n      success: false,\n      projects: [],\n      developers: [],\n\n      estimate:\n        {\n          selectedProject: '',\n          selectedDeveloper: '',\n          status: '',\n          statusType: '',\n          dueDate: '',\n          title: '',\n          taskDescription: '',\n        },\n      \n    };\n  },\n  // automatically computed properties(functions) to validate form inputs \n  computed: {\n      invalidProjectName(){\n          return this.estimate.selectedProject === ''\n      },\n      invalidDeveloper(){\n          return this.estimate.selectedDeveloper === ''\n      },\n      invalidDueDate(){\n          return this.estimate.dueDate === ''\n      },\n      invalidTitle(){\n          return this.estimate.title === ''\n      },\n      invalidTaskDescription(){\n          return this.estimate.taskDescription === ''\n      }\n  },\n  async created(){\n    try{\n      \n      const response = await axios.get(`api/projects`)\n      const resp = await axios.get(`api/users/developers` )\n      this.projects = response.data;\n      this.developers = resp.data;\n    }catch(e){\n      console.error(e)\n      \n    }\n  },\n    \n  methods: {\n    formatDateCreated: function(dateCreated){\n      return format(new Date(dateCreated), 'dd-MM-yyy')\n    },\n    formatDateEstimated: function(DateEstimated){\n      return format(new Date(DateEstimated), 'dd-MM-yyy')\n    },\n    // add new Estimate method\n    async addEstimate(){\n    this.clearForm()\n    this.submitting = true\n                // validating empty inputs\n        if(this.invalidProjectName || this.invalidDueDate  || this.invalidTitle || this.invalidTaskDescription)\n        {\n            this.error = true\n            return\n        }\n        let createdEstimate = this.submitting = true\n        if(createdEstimate){\n            let newEstimate = {\n                project: this.estimate.selectedProject.id,\n                developer: this.estimate.selectedDeveloper.id,\n                dueDate: this.estimate.dueDate,\n                title: this.estimate.title,\n                taskDescription: this.estimate.taskDescription,\n                projectManager: this.$store.getters.getUser.id,\n                status: \"Submitted\",\n        }\n        // console.log(newEstimate)\n        const response = await AuthService.addEstimate(newEstimate);\n        console.log(response)\n       \n        this.estimates.push({\n          project: response.project,\n          developer: response.developer,\n          dueDate: response.dueDate,\n          title: response.title,\n          taskDescription: response.taskDescription,\n          dateCreated: response.dateCreated,\n          status: response.status,\n        })\n        \n        }\n        this.success = true\n        this.error = false\n        this.submitting = false \n                         \n        },\n        // Save as draft method\n        async handleSaveDraft() {\n          console.log('testing save' )\n            this.clearForm()\n            this.submitting = true\n                // validating empty inputs\n                if(this.invalidProjectName || this.invalidDueDate || this.invalidTitle || this.invalidTaskDescription)\n                {\n                    this.error = true\n                    return\n                }\n                let draftedEstimate = this.submitting = true\n                if(draftedEstimate){\n                    let newEstimate = {\n                    project: this.estimate.selectedProject.id,\n                    developer: this.estimate.selectedDeveloper.id,\n                    dueDate: this.estimate.dueDate,\n                    title: this.estimate.title,\n                    taskDescription: this.estimate.taskDescription,\n                    projectManager: this.$store.getters.getUser.id,\n                    status: this.estimate.status = \"Draft\",\n                    statusType: this.estimate.statusType = \"warning\"\n                    }\n                console.log(newEstimate)\n                const response = await AuthService.addEstimate(newEstimate);\n                console.log(response)\n                \n                }\n                this.success = true\n                this.error = false\n          },  \n\n        clearForm(){\n                this.success = false\n                this.error = false\n            },\n  }\n};\n",{"version":3,"sources":["ListOfEstimatesTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ListOfEstimatesTable.vue","sourceRoot":"src/views/Tables","sourcesContent":["<template>\n  <div class=\"card shadow\"\n       :class=\"type === 'dark' ? 'bg-default': ''\">\n    <div class=\"card-header border-0\"\n         :class=\"type === 'dark' ? 'bg-transparent': ''\">\n      <div class=\"row \">\n        <div class=\"col text-right\">\n          <base-button type=\"primary\" id=\"create-estimate\" size=\"md\" class=\"shadow-none spacing btn-md\" @click=\"requestEstimateModal = true\">Request Estimate</base-button>\n          <modal :show.sync=\"requestEstimateModal\">\n                      <template slot=\"header\">\n                          <h3 class=\"modal-title \" id=\"exampleModalLabel\">Request Estimate</h3>\n                      </template>\n                      <!-- create estimate form -->\n                      <!-- <CreateEstimateForm  /> -->\n                          <form method=\"POST\" role=\"form\" @submit.prevent=\"addEstimate\">\n                            <div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-3\">          \n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Project</h6>\n                                </div>\n                                <div class=\"col-sm\">\n                                    <base-input alternative\n                                            ref=\"first\"\n                                            class=\"mb-3\"\n                                            placeholder=\"Add project here...\" \n                                            :class=\"{ 'has-error': submitting && invalidProjectName } \" \n                                            @keypress=\"clearForm\">\n                                            <select class=\"custom-select\" id=\"inputGroupSelect01\" v-model=\"estimate.selectedProject\">\n                                            <option value=\"\" disabled>Please select a project</option>\n                                            <option v-for=\"project in projects\" v-bind:value=\"{id: project._id, name: project.name}\">{{project.name}}</option>\n                                            </select>\n                                </base-input>\n                      \n                                </div>\n                                </div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-3\">\n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Assign to</h6>\n                                </div>\n                                <div class=\"col-sm\">\n                                    <base-input alternative\n                                            class=\"mb-3\"\n                                            placeholder=\"Add developer here...\"\n                                          :class=\"{ 'has-error': submitting && invalidDeveloper }\" \n                                            >\n                                            <select class=\"custom-select\" id=\"inputGroupSelect01\" v-model=\"estimate.selectedDeveloper\">\n                                                <option value=\"\" disabled>Please select a developer</option>\n                                                <option  v-for=\"developer in developers\" v-bind:value=\"{id: developer._id, name: developer.name}\"> {{developer.name}}</option>\n                                            </select>\n                                </base-input>\n                                </div>\n                                </div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-3\">\n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Due Date</h6>\n                                </div>\n                                <div class=\"col-sm\">\n                                    <base-input addon-left-icon=\"ni ni-calendar-grid-58\">\n                                        <flat-picker slot-scope=\"{focus, blur}\"\n                                                    @on-open=\"focus\"\n                                                    @on-close=\"blur\"\n                                                    :config=\"{allowInput: true, dateFormat: 'd-m-Y'}\"\n                                                    placeholder=\"17-07-2019\"\n                                                    class=\"form-control datepicker\"\n                                                    :class=\"{ 'has-error': submitting && invalidDueDate }\"\n                                                    v-model=\"estimate.dueDate\">\n                                        </flat-picker>\n                                    </base-input>\n                                </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-sm-3\">\n                                        <h6 class=\"heading-small text-muted mb-4 float-left\">Title</h6>\n                                    </div>\n                                    <div class=\"col-sm\">\n                                        <base-input alternative\n                                                class=\"mb-3\"\n                                                placeholder=\"Add title here...\"\n                                                v-model=\"estimate.title\" \n                                              \n                                                :class=\"{ 'has-error': submitting && invalidTitle }\"\n                                            >\n                                    </base-input>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-5\">\n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Main Task Description </h6>\n                                </div>\n                                <div class=\"col-sm-12\">\n                                    <base-input alternative=\"\"\n                                    :class=\"{ 'has-error': submitting && invalidTaskDescription }\"\n                                    \n                                    >\n                                        <textarea rows=\"4\" v-model=\"estimate.taskDescription\" class=\"form-control form-control-alternative\" placeholder=\"Add main task description here ...\"></textarea>\n                                    </base-input>\n                                </div>\n                                </div>\n                            </div>\n                                <p v-if=\"error && submitting\" class=\"error-message\">\n                                    ❗Please fill in all fields\n                                </p>\n                                <p v-if=\"success\" class=\"success-message\">\n                                    ✅ Request successfully sent\n                                </p>\n                                <base-button class=\"shadow-none mt-4 cancel-color\" type=\"secondary\" @click=\"handleSaveDraft()\" >Save as draft</base-button>\n                                <!-- <base-button class=\"shadow-none mt-4\" type=\"primary\" @click=\"addEstimate\">Send request</base-button> -->\n                                <base-button class=\"shadow-none mt-4\" type=\"primary\" @click=\"addEstimate()\">Send request</base-button>\n                            </form>\n                  </modal>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"table-responsive table-hover\">\n      <base-table class=\"table table-flush\"\n                  :class=\"type === 'dark' ? 'table-dark': ''\"\n                  :thead-classes=\"type === 'dark' ? 'thead-dark': 'thead-light'\" \n                  tbody-classes=\"list\"\n                  :data=\"estimates\" id=\"left\">\n        <template  slot=\"columns\"  >\n          <th class=\"bgcolor\">Title</th>\n          <th class=\"bgcolor\">Project</th>\n          <th class=\"bgcolor\">Developer</th>\n          <th class=\"bgcolor\">Date Created</th>\n          <th class=\"bgcolor\">Date Estimated</th>\n          <th class=\"bgcolor\">Status</th>\n          <th class=\"bgcolor\"></th>\n        </template>\n          <template class=\"table-row\" slot-scope=\"{row}\">\n          <td class=\"title\">\n            {{row.title}}\n          </td>\n          <td class=\"project\">\n            {{row.project.name}}\n          </td>\n          <td class=\"developer\">\n            {{row.developer.name}}\n          </td>\n          <td class=\"dateCreated\">\n            {{ formatDateCreated(row.dateCreated) }}\n           \n          </td>\n          <td class=\"dateEstimated\">\n            {{formatDateEstimated(row.DateEstimated)}}\n          </td>\n          <td>\n            <!-- <badge class=\"badge-dot mr-4\" :type=\"row.statusType\">\n              <i :class=\"`bg-${row.statusType}`\"></i>\n              <span class=\"status\">{{row.status}}</span>\n            </badge> -->\n              \n              <span v-if=\"row.status === 'Submitted'\" class=\"status\" id=\"status-submitted\">\n                {{row.status}}\n              </span>\n              <span v-else class=\"status\" id=\"status-estimated\">{{row.status}}</span>           \n          </td>\n         \n          <td >\n            <span class=\"action-icons\">\n              <router-link  :to=\"`/view-estimate/${row._id}`\" id=\"view\">\n                <i class=\"rounded-circle fa fa-eye fa-1x\" aria-hidden=\"true\" id=\"my-icons\" ></i>\n                <modal :show.sync=\"estimateModal\">\n                  <template slot=\"header\">\n                          <h3 class=\"modal-title \" id=\"exampleModalLabel\">Estimate</h3>\n                      </template>\n                </modal>\n              </router-link>\n            </span>\n           \n            \n            \n          </td>\n          </template>\n\n      </base-table>\n    </div>\n\n    <div class=\"card-footer d-flex justify-content-end\"\n         :class=\"type === 'dark' ? 'bg-transparent': ''\">\n      <!-- <base-pagination total=\"30\"></base-pagination> -->\n      <base-pagination></base-pagination>\n\n    </div>\n    \n  </div>\n</template>\n<script>\nimport CreateEstimateForm from \"../Forms/CreateEstimateForm\";\nimport EditEstimateForm from \"../Forms/EditEstimateForm\";\nimport flatPicker from \"vue-flatpickr-component\";\nimport \"flatpickr/dist/flatpickr.css\";\nimport axios from \"axios\";\n// import store from \"../../store\"\nimport { format } from 'date-fns' \nimport AuthService from '../../services/AuthService';\nexport default {\n  name: \"estimates-table\",\n  components: {\n    CreateEstimateForm,\n    EditEstimateForm,\n    flatPicker\n  },\n  props: {\n    estimates: Array,\n    type: {\n      type: String\n    },\n    title: String\n  },\n  data() {\n    return {\n      requestEstimateModal: false,\n      estimateModal: false,\n      format,\n\n      selectedProject: '',\n      selectedDeveloper: '',\n      error: false,\n      submitting: false,\n      success: false,\n      projects: [],\n      developers: [],\n\n      estimate:\n        {\n          selectedProject: '',\n          selectedDeveloper: '',\n          status: '',\n          statusType: '',\n          dueDate: '',\n          title: '',\n          taskDescription: '',\n        },\n      \n    };\n  },\n  // automatically computed properties(functions) to validate form inputs \n  computed: {\n      invalidProjectName(){\n          return this.estimate.selectedProject === ''\n      },\n      invalidDeveloper(){\n          return this.estimate.selectedDeveloper === ''\n      },\n      invalidDueDate(){\n          return this.estimate.dueDate === ''\n      },\n      invalidTitle(){\n          return this.estimate.title === ''\n      },\n      invalidTaskDescription(){\n          return this.estimate.taskDescription === ''\n      }\n  },\n  async created(){\n    try{\n      \n      const response = await axios.get(`api/projects`)\n      const resp = await axios.get(`api/users/developers` )\n      this.projects = response.data;\n      this.developers = resp.data;\n    }catch(e){\n      console.error(e)\n      \n    }\n  },\n    \n  methods: {\n    formatDateCreated: function(dateCreated){\n      return format(new Date(dateCreated), 'dd-MM-yyy')\n    },\n    formatDateEstimated: function(DateEstimated){\n      return format(new Date(DateEstimated), 'dd-MM-yyy')\n    },\n    // add new Estimate method\n    async addEstimate(){\n    this.clearForm()\n    this.submitting = true\n                // validating empty inputs\n        if(this.invalidProjectName || this.invalidDueDate  || this.invalidTitle || this.invalidTaskDescription)\n        {\n            this.error = true\n            return\n        }\n        let createdEstimate = this.submitting = true\n        if(createdEstimate){\n            let newEstimate = {\n                project: this.estimate.selectedProject.id,\n                developer: this.estimate.selectedDeveloper.id,\n                dueDate: this.estimate.dueDate,\n                title: this.estimate.title,\n                taskDescription: this.estimate.taskDescription,\n                projectManager: this.$store.getters.getUser.id,\n                status: \"Submitted\",\n        }\n        // console.log(newEstimate)\n        const response = await AuthService.addEstimate(newEstimate);\n        console.log(response)\n       \n        this.estimates.push({\n          project: response.project,\n          developer: response.developer,\n          dueDate: response.dueDate,\n          title: response.title,\n          taskDescription: response.taskDescription,\n          dateCreated: response.dateCreated,\n          status: response.status,\n        })\n        \n        }\n        this.success = true\n        this.error = false\n        this.submitting = false \n                         \n        },\n        // Save as draft method\n        async handleSaveDraft() {\n          console.log('testing save' )\n            this.clearForm()\n            this.submitting = true\n                // validating empty inputs\n                if(this.invalidProjectName || this.invalidDueDate || this.invalidTitle || this.invalidTaskDescription)\n                {\n                    this.error = true\n                    return\n                }\n                let draftedEstimate = this.submitting = true\n                if(draftedEstimate){\n                    let newEstimate = {\n                    project: this.estimate.selectedProject.id,\n                    developer: this.estimate.selectedDeveloper.id,\n                    dueDate: this.estimate.dueDate,\n                    title: this.estimate.title,\n                    taskDescription: this.estimate.taskDescription,\n                    projectManager: this.$store.getters.getUser.id,\n                    status: this.estimate.status = \"Draft\",\n                    statusType: this.estimate.statusType = \"warning\"\n                    }\n                console.log(newEstimate)\n                const response = await AuthService.addEstimate(newEstimate);\n                console.log(response)\n                \n                }\n                this.success = true\n                this.error = false\n          },  \n\n        clearForm(){\n                this.success = false\n                this.error = false\n            },\n  }\n};\n</script>\n<style>\n#view {\n  color: #747273;\n  padding-left: 10px;\n}\n#left {\n  text-align: left;\n}\n/* Adding cursor to table */\n.table-row {\n  cursor: pointer;\n}\n.spacing {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n/* Adjustments to font size of the table head content */\n.table thead th {\n  font-size: 13px;\n  font-weight: 700;\n}\n/* First column of table font adjustment */\n.text-sm {\n  font-weight: 400;\n  font-size: 13px !important;\n}\n/* styling rounded border */\n.rounded-circle {\n  border: 1px solid rgb(201, 201, 199);\n  padding: 6px;\n}\n/* Status column font size adjustment */\nspan .status {\n  font-size: 13px;\n}\n.bgcolor {\n  background: #e7eaec !important;\n}\n/* displaying action icons on hover */\ntable > tbody > tr .action-icons {\n  visibility: hidden;\n}\ntable > tbody > tr:hover .action-icons {\n  visibility: visible;\n}\n/* styling buttons */\n#create-estimate {\n  border-radius: 4px;\n}\n/* cancel button for modal */\n.cancel-color {\n  color: rgb(135, 141, 148);\n  background-color: #e2e0e1;\n}\n.cancel-color:hover {\n  color: #ffffff;\n  background-color: #afadae;\n}\n#my-icons {\n  background-color: #5e72e4;\n  border-color: #5e72e4;\n  color: #eee7eb;\n}\n#my-icons:hover {\n  background-color: #d10572;\n  border-color: #d10572;\n  color: #eee7eb;\n}\n#status-submitted{\n  color: #fb6340;\n}\n#status-estimated{\n  color: #2dce89;\n}\n/* Desktops and laptops ----------- */\n@media only screen and (min-width: 1224px) {\n  .card {\n    margin-top: 30px;\n  }\n}\n[class*='-message'] {\n    font-weight: 500;\n  }\n  .error-message {\n    color: #d33c40;\n    text-align: left;\n  }\n  .success-message {\n    color: #32a95d;\n    text-align: left;\n  }\n</style>"]}]}