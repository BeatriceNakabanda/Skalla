{"remainingRequest":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/src/views/Forms/CreateEstimateForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/src/views/Forms/CreateEstimateForm.vue","mtime":1580896445622},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport flatPicker from \"vue-flatpickr-component\";\nimport \"flatpickr/dist/flatpickr.css\";\nimport AuthService from \"../../services/AuthService\";\nexport default {\n  name: \"create-estimate-form\",\n  components: {\n    flatPicker\n  },\n  // props: ['estimate'],\n  data() {\n    return {\n      selectedProject: \"\",\n      selectedDeveloper: \"\",\n      error: false,\n      submitting: false,\n      success: false,\n      projects: [],\n      developers: [],\n\n      estimate: {\n        selectedProject: \"\",\n        selectedDeveloper: \"\",\n        status: \"\",\n        statusType: \"\",\n        dueDate: \"\",\n        title: \"\",\n        taskDescription: \"\"\n      }\n    };\n  },\n  // automatically computed properties(functions) to validate form inputs\n  computed: {\n    invalidProjectName() {\n      return this.estimate.project === \"\";\n    },\n    invalidDeveloper() {\n      return this.estimate.developers === \"\";\n    },\n    invalidDueDate() {\n      return this.estimate.dueDate === \"\";\n    },\n    invalidTitle() {\n      return this.estimate.title === \"\";\n    },\n    invalidTaskDescription() {\n      return this.estimate.taskDescription === \"\";\n    }\n  },\n  methods: {\n    async addEstimate() {\n      this.clearForm();\n      this.submitting = true;\n      // validating empty inputs\n      if (\n        this.invalidProjectName ||\n        this.invalidDueDate ||\n        this.invalidTitle ||\n        this.invalidTaskDescription\n      ) {\n        this.error = true;\n        return;\n      }\n  \n      },\n    clearForm() {\n      this.success = false;\n      this.error = false;\n    },\n    async handleSaveDraft() {\n      // eslint-disable-next-line no-console\n      console.log(\"testing save\");\n      this.clearForm();\n      this.submitting = true;\n      // validating empty inputs\n      if (\n        this.invalidProjectName ||\n        this.invalidDueDate ||\n        this.invalidTitle ||\n        this.invalidTaskDescription\n      ) {\n        this.error = true;\n        return;\n      }\n      let draftedEstimate = (this.submitting = true);\n      if (draftedEstimate) {\n        let newEstimate = {\n          project: this.estimate.selectedProject.id,\n          developer: this.estimate.selectedDeveloper.id,\n          dueDate: this.estimate.dueDate,\n          title: this.estimate.title,\n          taskDescription: this.estimate.taskDescription,\n          projectManager: this.$store.getters.getUser.id,\n          status: (this.estimate.status = \"Draft\"),\n          statusType: (this.estimate.statusType = \"warning\")\n        };\n        console.log(newEstimate);\n        const response = await AuthService.addEstimate(newEstimate);\n        console.log(response);\n      }\n      this.success = true;\n      this.error = false;\n    }\n\n  },\n  async created() {\n    try {\n      const response = await axios.get(`api/projects`);\n      const resp = await axios.get(\n        `api/users/developers`\n      );\n      this.projects = response.data;\n      this.developers = resp.data;\n      // window.location.reload();\n      console.log(this.projects);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n",{"version":3,"sources":["CreateEstimateForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"CreateEstimateForm.vue","sourceRoot":"src/views/Forms","sourcesContent":["<template>\n  <form method=\"POST\" role=\"form\" @submit.prevent=\"addEstimate\">\n    <div>\n      <div class=\"row\">\n        <div class=\"col-sm-3\">\n          <h6 class=\"heading-small text-muted mb-4 float-left\">Project</h6>\n        </div>\n        <div class=\"col-sm\">\n          <base-input\n            alternative\n            ref=\"first\"\n            class=\"mb-3\"\n            placeholder=\"Add project here...\"\n            :class=\"{ 'has-error': submitting && invalidProjectName }\"\n            @keypress=\"clearForm\"\n          >\n            <select\n              class=\"custom-select\"\n              id=\"inputGroupSelect01\"\n              v-model=\"estimate.selectedProject\">\n              <option value=\"\" disabled>Please select a project</option>\n              <option v-for=\"project in projects\"\n                v-bind:value=\"{ id: project._id, name: project.name }\">{{ project.name }}\n              </option>\n            </select>\n          </base-input>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-3\">\n          <h6 class=\"heading-small text-muted mb-4 float-left\">Assign to</h6>\n        </div>\n        <div class=\"col-sm\">\n          <base-input\n            alternative\n            class=\"mb-3\"\n            placeholder=\"Add developer here...\"\n            :class=\"{ 'has-error': submitting && invalidDeveloper }\">\n            <select\n              class=\"custom-select\"\n              id=\"inputGroupSelect01\"\n              v-model=\"estimate.selectedDeveloper\">\n              <option value=\"\" disabled>Please select a developer</option>\n              <option\n                v-for=\"developer in developers\"\n                v-bind:value=\"{ id: developer._id, name: developer.name }\"\n              >\n                {{ developer.name }}</option\n              >\n            </select>\n          </base-input>\n          <!-- <p>id: {{selectedProject.id}}</p>\n            <p>name: {{selectedProject.name}}</p>\n            <p>id: {{selectedDeveloper.id}}</p>\n            <p>name: {{selectedDeveloper.name}}</p> -->\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-3\">\n          <h6 class=\"heading-small text-muted mb-4 float-left\">Due Date</h6>\n        </div>\n        <div class=\"col-sm\">\n          <base-input addon-left-icon=\"ni ni-calendar-grid-58\">\n            <flat-picker\n              slot-scope=\"{ focus, blur }\"\n              @on-open=\"focus\"\n              @on-close=\"blur\"\n              :config=\"{ allowInput: true, dateFormat: 'd-m-Y' }\"\n              placeholder=\"17-07-2019\"\n              class=\"form-control datepicker\"\n              :class=\"{ 'has-error': submitting && invalidDueDate }\"\n              v-model=\"estimate.dueDate\"\n            >\n            </flat-picker>\n          </base-input>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-3\">\n          <h6 class=\"heading-small text-muted mb-4 float-left\">Title</h6>\n        </div>\n        <div class=\"col-sm\">\n          <base-input\n            alternative\n            class=\"mb-3\"\n            placeholder=\"Add title here...\"\n            v-model=\"estimate.title\"\n            :class=\"{ 'has-error': submitting && invalidTitle }\"\n          >\n          </base-input>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-5\">\n          <h6 class=\"heading-small text-muted mb-4 float-left\">\n            Main Task Description\n          </h6>\n        </div>\n        <div class=\"col-sm-12\">\n          <base-input\n            alternative=\"\"\n            :class=\"{ 'has-error': submitting && invalidTaskDescription }\"\n          >\n            <textarea\n              rows=\"4\"\n              v-model=\"estimate.taskDescription\"\n              class=\"form-control form-control-alternative\"\n              placeholder=\"Add main task description here ...\"\n            ></textarea>\n          </base-input>\n        </div>\n      </div>\n    </div>\n    <p v-if=\"error && submitting\" class=\"error-message\">\n      ❗Please fill in all fields\n    </p>\n    <p v-if=\"success\" class=\"success-message\">\n      ✅ Request successfully sent\n    </p>\n    <base-button\n      class=\"shadow-none mt-4 cancel-color\"\n      type=\"secondary\"\n      @click=\"handleSaveDraft()\"\n      >Save as draft</base-button\n    >\n    <!-- <base-button class=\"shadow-none mt-4\" type=\"primary\" @click=\"addEstimate\">Send request</base-button> -->\n    <base-button class=\"shadow-none mt-4\" type=\"primary\" @click=\"addEstimate()\"\n      >Send request</base-button\n    >\n  </form>\n</template>\n<script>\nimport axios from \"axios\";\nimport flatPicker from \"vue-flatpickr-component\";\nimport \"flatpickr/dist/flatpickr.css\";\nimport AuthService from \"../../services/AuthService\";\nexport default {\n  name: \"create-estimate-form\",\n  components: {\n    flatPicker\n  },\n  // props: ['estimate'],\n  data() {\n    return {\n      selectedProject: \"\",\n      selectedDeveloper: \"\",\n      error: false,\n      submitting: false,\n      success: false,\n      projects: [],\n      developers: [],\n\n      estimate: {\n        selectedProject: \"\",\n        selectedDeveloper: \"\",\n        status: \"\",\n        statusType: \"\",\n        dueDate: \"\",\n        title: \"\",\n        taskDescription: \"\"\n      }\n    };\n  },\n  // automatically computed properties(functions) to validate form inputs\n  computed: {\n    invalidProjectName() {\n      return this.estimate.project === \"\";\n    },\n    invalidDeveloper() {\n      return this.estimate.developers === \"\";\n    },\n    invalidDueDate() {\n      return this.estimate.dueDate === \"\";\n    },\n    invalidTitle() {\n      return this.estimate.title === \"\";\n    },\n    invalidTaskDescription() {\n      return this.estimate.taskDescription === \"\";\n    }\n  },\n  methods: {\n    async addEstimate() {\n      this.clearForm();\n      this.submitting = true;\n      // validating empty inputs\n      if (\n        this.invalidProjectName ||\n        this.invalidDueDate ||\n        this.invalidTitle ||\n        this.invalidTaskDescription\n      ) {\n        this.error = true;\n        return;\n      }\n  \n      },\n    clearForm() {\n      this.success = false;\n      this.error = false;\n    },\n    async handleSaveDraft() {\n      // eslint-disable-next-line no-console\n      console.log(\"testing save\");\n      this.clearForm();\n      this.submitting = true;\n      // validating empty inputs\n      if (\n        this.invalidProjectName ||\n        this.invalidDueDate ||\n        this.invalidTitle ||\n        this.invalidTaskDescription\n      ) {\n        this.error = true;\n        return;\n      }\n      let draftedEstimate = (this.submitting = true);\n      if (draftedEstimate) {\n        let newEstimate = {\n          project: this.estimate.selectedProject.id,\n          developer: this.estimate.selectedDeveloper.id,\n          dueDate: this.estimate.dueDate,\n          title: this.estimate.title,\n          taskDescription: this.estimate.taskDescription,\n          projectManager: this.$store.getters.getUser.id,\n          status: (this.estimate.status = \"Draft\"),\n          statusType: (this.estimate.statusType = \"warning\")\n        };\n        console.log(newEstimate);\n        const response = await AuthService.addEstimate(newEstimate);\n        console.log(response);\n      }\n      this.success = true;\n      this.error = false;\n    }\n\n  },\n  async created() {\n    try {\n      const response = await axios.get(`api/projects`);\n      const resp = await axios.get(\n        `api/users/developers`\n      );\n      this.projects = response.data;\n      this.developers = resp.data;\n      // window.location.reload();\n      console.log(this.projects);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n</script>\n<style scoped>\n[class*=\"-message\"] {\n  font-weight: 500;\n}\n.error-message {\n  color: #d33c40;\n  text-align: left;\n}\n.success-message {\n  color: #32a95d;\n  text-align: left;\n}\n</style>\n"]}]}