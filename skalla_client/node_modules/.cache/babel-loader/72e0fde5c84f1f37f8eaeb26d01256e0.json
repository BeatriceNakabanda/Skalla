{"remainingRequest":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/thread-loader/dist/cjs.js!/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/babel-loader/lib/index.js!/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/src/views/Tables/ListOfEstimatesTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/src/views/Tables/ListOfEstimatesTable.vue","mtime":1580895677150},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/media/beatrice/AA5A6A6A5A6A336D1/templates/1/new/Estimation-System/skalla_client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CreateEstimateForm from \"../Forms/CreateEstimateForm\";\nimport EditEstimateForm from \"../Forms/EditEstimateForm\";\nimport flatPicker from \"vue-flatpickr-component\";\nimport \"flatpickr/dist/flatpickr.css\";\nimport axios from \"axios\"; // import store from \"../../store\"\n\nimport { format } from 'date-fns';\nimport AuthService from \"../../services/AuthService\";\nexport default {\n  name: \"estimates-table\",\n  components: {\n    CreateEstimateForm: CreateEstimateForm,\n    EditEstimateForm: EditEstimateForm,\n    flatPicker: flatPicker\n  },\n  props: {\n    estimates: Array,\n    type: {\n      type: String\n    },\n    title: String\n  },\n  data: function data() {\n    return {\n      requestEstimateModal: false,\n      estimateModal: false,\n      format: format,\n      selectedProject: '',\n      selectedDeveloper: '',\n      error: false,\n      submitting: false,\n      success: false,\n      projects: [],\n      developers: [],\n      estimate: {\n        selectedProject: '',\n        selectedDeveloper: '',\n        status: '',\n        statusType: '',\n        dueDate: '',\n        title: '',\n        taskDescription: ''\n      }\n    };\n  },\n  // automatically computed properties(functions) to validate form inputs \n  computed: {\n    invalidProjectName: function invalidProjectName() {\n      return this.estimate.selectedProject === '';\n    },\n    invalidDeveloper: function invalidDeveloper() {\n      return this.estimate.selectedDeveloper === '';\n    },\n    invalidDueDate: function invalidDueDate() {\n      return this.estimate.dueDate === '';\n    },\n    invalidTitle: function invalidTitle() {\n      return this.estimate.title === '';\n    },\n    invalidTaskDescription: function invalidTaskDescription() {\n      return this.estimate.taskDescription === '';\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var response, resp;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"api/projects\");\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return axios.get(\"api/users/developers\");\n\n            case 6:\n              resp = _context.sent;\n              this.projects = response.data;\n              this.developers = resp.data;\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 11]]);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    formatDateCreated: function formatDateCreated(dateCreated) {\n      return format(new Date(dateCreated), 'dd-MM-yyy');\n    },\n    formatDateEstimated: function formatDateEstimated(DateEstimated) {\n      return format(new Date(DateEstimated), 'dd-MM-yyy');\n    },\n    // add new Estimate method\n    addEstimate: function () {\n      var _addEstimate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var createdEstimate, newEstimate, response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.clearForm();\n                this.submitting = true; // validating empty inputs\n\n                if (!(this.invalidProjectName || this.invalidDueDate || this.invalidTitle || this.invalidTaskDescription)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                this.error = true;\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                createdEstimate = this.submitting = true;\n\n                if (!createdEstimate) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                newEstimate = {\n                  project: this.estimate.selectedProject.id,\n                  developer: this.estimate.selectedDeveloper.id,\n                  dueDate: this.estimate.dueDate,\n                  title: this.estimate.title,\n                  taskDescription: this.estimate.taskDescription,\n                  projectManager: this.$store.getters.getUser.id,\n                  status: \"Submitted\"\n                }; // console.log(newEstimate)\n\n                _context2.next = 10;\n                return AuthService.addEstimate(newEstimate);\n\n              case 10:\n                response = _context2.sent;\n                console.log(response);\n                this.estimates.push({\n                  project: response.project,\n                  developer: response.developer,\n                  dueDate: response.dueDate,\n                  title: response.title,\n                  taskDescription: response.taskDescription,\n                  dateCreated: response.dateCreated,\n                  status: response.status\n                });\n\n              case 13:\n                this.success = true;\n                this.error = false;\n                this.submitting = false;\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function addEstimate() {\n        return _addEstimate.apply(this, arguments);\n      }\n\n      return addEstimate;\n    }(),\n    // Save as draft method\n    handleSaveDraft: function () {\n      var _handleSaveDraft = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var draftedEstimate, newEstimate, response;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log('testing save');\n                this.clearForm();\n                this.submitting = true; // validating empty inputs\n\n                if (!(this.invalidProjectName || this.invalidDueDate || this.invalidTitle || this.invalidTaskDescription)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                this.error = true;\n                return _context3.abrupt(\"return\");\n\n              case 6:\n                draftedEstimate = this.submitting = true;\n\n                if (!draftedEstimate) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                newEstimate = {\n                  project: this.estimate.selectedProject.id,\n                  developer: this.estimate.selectedDeveloper.id,\n                  dueDate: this.estimate.dueDate,\n                  title: this.estimate.title,\n                  taskDescription: this.estimate.taskDescription,\n                  projectManager: this.$store.getters.getUser.id,\n                  status: this.estimate.status = \"Draft\",\n                  statusType: this.estimate.statusType = \"warning\"\n                };\n                console.log(newEstimate);\n                _context3.next = 12;\n                return AuthService.addEstimate(newEstimate);\n\n              case 12:\n                response = _context3.sent;\n                console.log(response);\n\n              case 14:\n                this.success = true;\n                this.error = false;\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleSaveDraft() {\n        return _handleSaveDraft.apply(this, arguments);\n      }\n\n      return handleSaveDraft;\n    }(),\n    clearForm: function clearForm() {\n      this.success = false;\n      this.error = false;\n    }\n  }\n};",{"version":3,"sources":["ListOfEstimatesTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"card shadow\"\n       :class=\"type === 'dark' ? 'bg-default': ''\">\n    <div class=\"card-header border-0\"\n         :class=\"type === 'dark' ? 'bg-transparent': ''\">\n      <div class=\"row \">\n        <div class=\"col text-right\">\n          <base-button type=\"primary\" id=\"create-estimate\" size=\"md\" class=\"shadow-none spacing btn-md\" @click=\"requestEstimateModal = true\">Request Estimate</base-button>\n          <modal :show.sync=\"requestEstimateModal\">\n                      <template slot=\"header\">\n                          <h3 class=\"modal-title \" id=\"exampleModalLabel\">Request Estimate</h3>\n                      </template>\n                      <!-- create estimate form -->\n                      <!-- <CreateEstimateForm  /> -->\n                          <form method=\"POST\" role=\"form\" @submit.prevent=\"addEstimate\">\n                            <div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-3\">          \n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Project</h6>\n                                </div>\n                                <div class=\"col-sm\">\n                                    <base-input alternative\n                                            ref=\"first\"\n                                            class=\"mb-3\"\n                                            placeholder=\"Add project here...\" \n                                            :class=\"{ 'has-error': submitting && invalidProjectName } \" \n                                            @keypress=\"clearForm\">\n                                            <select class=\"custom-select\" id=\"inputGroupSelect01\" v-model=\"estimate.selectedProject\">\n                                            <option value=\"\" disabled>Please select a project</option>\n                                            <option v-for=\"project in projects\" v-bind:value=\"{id: project._id, name: project.name}\">{{project.name}}</option>\n                                            </select>\n                                </base-input>\n                      \n                                </div>\n                                </div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-3\">\n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Assign to</h6>\n                                </div>\n                                <div class=\"col-sm\">\n                                    <base-input alternative\n                                            class=\"mb-3\"\n                                            placeholder=\"Add developer here...\"\n                                          :class=\"{ 'has-error': submitting && invalidDeveloper }\" \n                                            >\n                                            <select class=\"custom-select\" id=\"inputGroupSelect01\" v-model=\"estimate.selectedDeveloper\">\n                                                <option value=\"\" disabled>Please select a developer</option>\n                                                <option  v-for=\"developer in developers\" v-bind:value=\"{id: developer._id, name: developer.name}\"> {{developer.name}}</option>\n                                            </select>\n                                </base-input>\n                                </div>\n                                </div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-3\">\n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Due Date</h6>\n                                </div>\n                                <div class=\"col-sm\">\n                                    <base-input addon-left-icon=\"ni ni-calendar-grid-58\">\n                                        <flat-picker slot-scope=\"{focus, blur}\"\n                                                    @on-open=\"focus\"\n                                                    @on-close=\"blur\"\n                                                    :config=\"{allowInput: true, dateFormat: 'd-m-Y'}\"\n                                                    placeholder=\"17-07-2019\"\n                                                    class=\"form-control datepicker\"\n                                                    :class=\"{ 'has-error': submitting && invalidDueDate }\"\n                                                    v-model=\"estimate.dueDate\">\n                                        </flat-picker>\n                                    </base-input>\n                                </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-sm-3\">\n                                        <h6 class=\"heading-small text-muted mb-4 float-left\">Title</h6>\n                                    </div>\n                                    <div class=\"col-sm\">\n                                        <base-input alternative\n                                                class=\"mb-3\"\n                                                placeholder=\"Add title here...\"\n                                                v-model=\"estimate.title\" \n                                              \n                                                :class=\"{ 'has-error': submitting && invalidTitle }\"\n                                            >\n                                    </base-input>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                <div class=\"col-sm-5\">\n                                    <h6 class=\"heading-small text-muted mb-4 float-left\">Main Task Description </h6>\n                                </div>\n                                <div class=\"col-sm-12\">\n                                    <base-input alternative=\"\"\n                                    :class=\"{ 'has-error': submitting && invalidTaskDescription }\"\n                                    \n                                    >\n                                        <textarea rows=\"4\" v-model=\"estimate.taskDescription\" class=\"form-control form-control-alternative\" placeholder=\"Add main task description here ...\"></textarea>\n                                    </base-input>\n                                </div>\n                                </div>\n                            </div>\n                                <p v-if=\"error && submitting\" class=\"error-message\">\n                                    ❗Please fill in all fields\n                                </p>\n                                <p v-if=\"success\" class=\"success-message\">\n                                    ✅ Request successfully sent\n                                </p>\n                                <base-button class=\"shadow-none mt-4 cancel-color\" type=\"secondary\" @click=\"handleSaveDraft()\" >Save as draft</base-button>\n                                <!-- <base-button class=\"shadow-none mt-4\" type=\"primary\" @click=\"addEstimate\">Send request</base-button> -->\n                                <base-button class=\"shadow-none mt-4\" type=\"primary\" @click=\"addEstimate()\">Send request</base-button>\n                            </form>\n                  </modal>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"table-responsive table-hover\">\n      <base-table class=\"table table-flush\"\n                  :class=\"type === 'dark' ? 'table-dark': ''\"\n                  :thead-classes=\"type === 'dark' ? 'thead-dark': 'thead-light'\" \n                  tbody-classes=\"list\"\n                  :data=\"estimates\" id=\"left\">\n        <template  slot=\"columns\"  >\n          <th class=\"bgcolor\">Title</th>\n          <th class=\"bgcolor\">Project</th>\n          <th class=\"bgcolor\">Developer</th>\n          <th class=\"bgcolor\">Date Created</th>\n          <th class=\"bgcolor\">Date Estimated</th>\n          <th class=\"bgcolor\">Status</th>\n          <th class=\"bgcolor\"></th>\n        </template>\n          <template class=\"table-row\" slot-scope=\"{row}\">\n          <td class=\"title\">\n            {{row.title}}\n          </td>\n          <td class=\"project\">\n            {{row.project.name}}\n          </td>\n          <td class=\"developer\">\n            {{row.developer.name}}\n          </td>\n          <td class=\"dateCreated\">\n            {{ formatDateCreated(row.dateCreated) }}\n           \n          </td>\n          <td class=\"dateEstimated\">\n            {{formatDateEstimated(row.DateEstimated)}}\n          </td>\n          <td>\n            <!-- <badge class=\"badge-dot mr-4\" :type=\"row.statusType\">\n              <i :class=\"`bg-${row.statusType}`\"></i>\n              <span class=\"status\">{{row.status}}</span>\n            </badge> -->\n              \n              <span v-if=\"row.status === 'Submitted'\" class=\"status\" id=\"status-submitted\">\n                {{row.status}}\n              </span>\n              <span v-else class=\"status\" id=\"status-estimated\">{{row.status}}</span>           \n          </td>\n         \n          <td >\n            <span class=\"action-icons\">\n              <router-link  :to=\"`/view-estimate/${row._id}`\" id=\"view\">\n                <i class=\"rounded-circle fa fa-eye fa-1x\" aria-hidden=\"true\" id=\"my-icons\" ></i>\n                <modal :show.sync=\"estimateModal\">\n                  <template slot=\"header\">\n                          <h3 class=\"modal-title \" id=\"exampleModalLabel\">Estimate</h3>\n                      </template>\n                </modal>\n              </router-link>\n            </span>\n           \n            \n            \n          </td>\n          </template>\n\n      </base-table>\n    </div>\n\n    <div class=\"card-footer d-flex justify-content-end\"\n         :class=\"type === 'dark' ? 'bg-transparent': ''\">\n      <!-- <base-pagination total=\"30\"></base-pagination> -->\n      <base-pagination></base-pagination>\n\n    </div>\n    \n  </div>\n</template>\n<script>\nimport CreateEstimateForm from \"../Forms/CreateEstimateForm\";\nimport EditEstimateForm from \"../Forms/EditEstimateForm\";\nimport flatPicker from \"vue-flatpickr-component\";\nimport \"flatpickr/dist/flatpickr.css\";\nimport axios from \"axios\";\n// import store from \"../../store\"\nimport { format } from 'date-fns' \nimport AuthService from '../../services/AuthService';\nexport default {\n  name: \"estimates-table\",\n  components: {\n    CreateEstimateForm,\n    EditEstimateForm,\n    flatPicker\n  },\n  props: {\n    estimates: Array,\n    type: {\n      type: String\n    },\n    title: String\n  },\n  data() {\n    return {\n      requestEstimateModal: false,\n      estimateModal: false,\n      format,\n\n      selectedProject: '',\n      selectedDeveloper: '',\n      error: false,\n      submitting: false,\n      success: false,\n      projects: [],\n      developers: [],\n\n      estimate:\n        {\n          selectedProject: '',\n          selectedDeveloper: '',\n          status: '',\n          statusType: '',\n          dueDate: '',\n          title: '',\n          taskDescription: '',\n        },\n      \n    };\n  },\n  // automatically computed properties(functions) to validate form inputs \n  computed: {\n      invalidProjectName(){\n          return this.estimate.selectedProject === ''\n      },\n      invalidDeveloper(){\n          return this.estimate.selectedDeveloper === ''\n      },\n      invalidDueDate(){\n          return this.estimate.dueDate === ''\n      },\n      invalidTitle(){\n          return this.estimate.title === ''\n      },\n      invalidTaskDescription(){\n          return this.estimate.taskDescription === ''\n      }\n  },\n  async created(){\n    try{\n      \n      const response = await axios.get(`api/projects`)\n      const resp = await axios.get(`api/users/developers` )\n      this.projects = response.data;\n      this.developers = resp.data;\n    }catch(e){\n      console.error(e)\n      \n    }\n  },\n    \n  methods: {\n    formatDateCreated: function(dateCreated){\n      return format(new Date(dateCreated), 'dd-MM-yyy')\n    },\n    formatDateEstimated: function(DateEstimated){\n      return format(new Date(DateEstimated), 'dd-MM-yyy')\n    },\n    // add new Estimate method\n    async addEstimate(){\n    this.clearForm()\n    this.submitting = true\n                // validating empty inputs\n        if(this.invalidProjectName || this.invalidDueDate  || this.invalidTitle || this.invalidTaskDescription)\n        {\n            this.error = true\n            return\n        }\n        let createdEstimate = this.submitting = true\n        if(createdEstimate){\n            let newEstimate = {\n                project: this.estimate.selectedProject.id,\n                developer: this.estimate.selectedDeveloper.id,\n                dueDate: this.estimate.dueDate,\n                title: this.estimate.title,\n                taskDescription: this.estimate.taskDescription,\n                projectManager: this.$store.getters.getUser.id,\n                status: \"Submitted\",\n        }\n        // console.log(newEstimate)\n        const response = await AuthService.addEstimate(newEstimate);\n        console.log(response)\n       \n        this.estimates.push({\n          project: response.project,\n          developer: response.developer,\n          dueDate: response.dueDate,\n          title: response.title,\n          taskDescription: response.taskDescription,\n          dateCreated: response.dateCreated,\n          status: response.status,\n        })\n        \n        }\n        this.success = true\n        this.error = false\n        this.submitting = false \n                         \n        },\n        // Save as draft method\n        async handleSaveDraft() {\n          console.log('testing save' )\n            this.clearForm()\n            this.submitting = true\n                // validating empty inputs\n                if(this.invalidProjectName || this.invalidDueDate || this.invalidTitle || this.invalidTaskDescription)\n                {\n                    this.error = true\n                    return\n                }\n                let draftedEstimate = this.submitting = true\n                if(draftedEstimate){\n                    let newEstimate = {\n                    project: this.estimate.selectedProject.id,\n                    developer: this.estimate.selectedDeveloper.id,\n                    dueDate: this.estimate.dueDate,\n                    title: this.estimate.title,\n                    taskDescription: this.estimate.taskDescription,\n                    projectManager: this.$store.getters.getUser.id,\n                    status: this.estimate.status = \"Draft\",\n                    statusType: this.estimate.statusType = \"warning\"\n                    }\n                console.log(newEstimate)\n                const response = await AuthService.addEstimate(newEstimate);\n                console.log(response)\n                \n                }\n                this.success = true\n                this.error = false\n          },  \n\n        clearForm(){\n                this.success = false\n                this.error = false\n            },\n  }\n};\n</script>\n<style>\n#view {\n  color: #747273;\n  padding-left: 10px;\n}\n#left {\n  text-align: left;\n}\n/* Adding cursor to table */\n.table-row {\n  cursor: pointer;\n}\n.spacing {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n/* Adjustments to font size of the table head content */\n.table thead th {\n  font-size: 13px;\n  font-weight: 700;\n}\n/* First column of table font adjustment */\n.text-sm {\n  font-weight: 400;\n  font-size: 13px !important;\n}\n/* styling rounded border */\n.rounded-circle {\n  border: 1px solid rgb(201, 201, 199);\n  padding: 6px;\n}\n/* Status column font size adjustment */\nspan .status {\n  font-size: 13px;\n}\n.bgcolor {\n  background: #e7eaec !important;\n}\n/* displaying action icons on hover */\ntable > tbody > tr .action-icons {\n  visibility: hidden;\n}\ntable > tbody > tr:hover .action-icons {\n  visibility: visible;\n}\n/* styling buttons */\n#create-estimate {\n  border-radius: 4px;\n}\n/* cancel button for modal */\n.cancel-color {\n  color: rgb(135, 141, 148);\n  background-color: #e2e0e1;\n}\n.cancel-color:hover {\n  color: #ffffff;\n  background-color: #afadae;\n}\n#my-icons {\n  background-color: #5e72e4;\n  border-color: #5e72e4;\n  color: #eee7eb;\n}\n#my-icons:hover {\n  background-color: #d10572;\n  border-color: #d10572;\n  color: #eee7eb;\n}\n#status-submitted{\n  color: #fb6340;\n}\n#status-estimated{\n  color: #2dce89;\n}\n/* Desktops and laptops ----------- */\n@media only screen and (min-width: 1224px) {\n  .card {\n    margin-top: 30px;\n  }\n}\n[class*='-message'] {\n    font-weight: 500;\n  }\n  .error-message {\n    color: #d33c40;\n    text-align: left;\n  }\n  .success-message {\n    color: #32a95d;\n    text-align: left;\n  }\n</style>"],"sourceRoot":"src/views/Tables"}]}